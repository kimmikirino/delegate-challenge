{"version":3,"sources":["components/Header/index.js","components/Layout/index.js","api/index.js","config/environments.js","api/users/index.js","context/index.js","reducer/index.js","components/UserDetail/FormEdit.js","components/UserDetail/index.js","pages/Users.js","App.js","serviceWorker.js","index.js"],"names":["AntdHeader","Layout","Header","className","theme","mode","defaultSelectedKeys","Item","key","Content","AntdLayout","Footer","children","span","offset","style","textAlign","api","axios","create","baseURL","headers","getUsers","page","a","get","data","putUser","id","body","put","UserContext","createContext","users","updateUsers","userReducer","state","action","type","payload","index","findIndex","el","Error","Title","Typography","layout","labelCol","wrapperCol","tailLayout","FormEdit","user","useContext","Form","useForm","form","useState","isLoading","setIsLoading","onFinish","values","useEffect","setFieldsValue","name","level","label","rules","required","message","initialValue","first_name","last_name","email","htmlType","loading","Meta","Card","UserDetail","align","backgroundColor","xs","md","cover","src","avatar","title","description","defaultProps","columns","dataIndex","render","img","Users","useReducer","dispatch","pagination","setPagination","selectedRowKeys","setSelectedRowKeys","selectedRow","setSelectedRow","rowSelection","onChange","rowsKeys","selectedRows","fetchData","current","per_page","total","pageSize","userUpdated","filter","Provider","value","dataSource","ev","rowKey","App","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.7c3a96ba.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Layout, Menu } from \"antd\";\r\n\r\nconst AntdHeader = Layout.Header;\r\n\r\nconst Header = () => {\r\n  // const handleClick = () => {};\r\n  // selectedKeys={[current]}\r\n  return (\r\n    <AntdHeader>\r\n      <div className=\"logo\" />\r\n      <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={[\"1\"]}>\r\n        <Menu.Item key=\"1\">Users</Menu.Item>\r\n      </Menu>\r\n    </AntdHeader>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport { Layout as AntdLayout, Row, Col } from \"antd\";\r\n\r\nimport Header from \"../Header\";\r\n\r\nimport \"./index.css\";\r\n\r\nconst { Content, Footer } = AntdLayout;\r\n\r\nconst Layout = ({ children }) => {\r\n  return (\r\n    <AntdLayout className=\"layout\">\r\n      <Header />\r\n      <Content>\r\n        <Row>\r\n          <Col span={16} offset={4}>{children}</Col>\r\n        </Row>\r\n      </Content>\r\n      <Footer style={{ textAlign: \"center\" }}>\r\n        Delegate Challenge Created by Jaqueline Kirino\r\n      </Footer>\r\n    </AntdLayout>\r\n  );\r\n};\r\n\r\nexport default Layout;\r\n","import axios from \"axios\";\r\nimport environments from \"../config/environments\";\r\n\r\nconst api = axios.create({\r\n  baseURL: environments.ENDPOINT,\r\n  headers: {\r\n    \"content-type\": \"application/json\",\r\n  },\r\n});\r\n\r\nexport default api;","export default {\r\n  ENDPOINT: \"https://reqres.in/api/\"\r\n}","import api from \"../\";\r\n\r\nexport const getUsers = async (page) => {\r\n  const { data } = await api.get(`/users?page=${page}`);\r\n\r\n  return data;\r\n};\r\n\r\nexport const putUser = async (id, body) => {\r\n  const { data } = await api.put(`/users/${id}`, body);\r\n\r\n  return data;\r\n};\r\n","import { createContext } from \"react\";\r\n\r\nexport const UserContext = createContext({\r\n  users: [],\r\n  updateUsers: () => {},\r\n});\r\n","export const userReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"get_users\":\r\n      return { users: action.payload };\r\n    case \"update_users\":\r\n      const { users } = state;\r\n      const { payload } = action;\r\n      const index = users.findIndex((el) => el.id === payload.id);\r\n      users[index] = payload;\r\n\r\n      return { users: [...users] };\r\n    default:\r\n      throw new Error();\r\n  }\r\n};\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { Form, Input, Button, Typography } from \"antd\";\r\n\r\nimport { UserContext } from \"../../context\";\r\nimport { putUser } from \"../../api/users\";\r\n\r\nimport \"./FormEdit.css\";\r\n\r\nconst { Title } = Typography;\r\n\r\nconst layout = {\r\n  labelCol: { span: 4 },\r\n  wrapperCol: { span: 18 },\r\n};\r\n\r\nconst tailLayout = {\r\n  wrapperCol: { offset: 4, span: 18 },\r\n};\r\n\r\nconst FormEdit = ({ data }) => {\r\n  const user = useContext(UserContext);\r\n  const [form] = Form.useForm();\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const onFinish = async (values) => {\r\n    setIsLoading(true);\r\n    await putUser(data.id, values);\r\n    user.updateUsers({ type: \"update_users\", payload: { ...data, ...values } });\r\n    setIsLoading(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    form.setFieldsValue(data);\r\n  }, [data, form]);\r\n\r\n  return (\r\n    <Form {...layout} form={form} name=\"user-data\" onFinish={onFinish}>\r\n      <Title level={4} className=\"detail-title\">\r\n        Update user information\r\n      </Title>\r\n\r\n      <Form.Item\r\n        label=\"First name\"\r\n        name=\"first_name\"\r\n        rules={[{ required: true, message: \"Please input the first name!\" }]}\r\n        initialValue={data.first_name}\r\n      >\r\n        <Input />\r\n      </Form.Item>\r\n\r\n      <Form.Item\r\n        label=\"Last Name\"\r\n        name=\"last_name\"\r\n        rules={[{ required: true, message: \"Please input the last name!\" }]}\r\n        initialValue={data.last_name}\r\n      >\r\n        <Input />\r\n      </Form.Item>\r\n\r\n      <Form.Item\r\n        label=\"E-mail\"\r\n        name=\"email\"\r\n        rules={[{ required: true, message: \"Please input the e-mail!\" }]}\r\n        initialValue={data.email}\r\n      >\r\n        <Input />\r\n      </Form.Item>\r\n\r\n      <Form.Item {...tailLayout}>\r\n        <Button type=\"primary\" htmlType=\"submit\" loading={isLoading}>\r\n          Save\r\n        </Button>\r\n      </Form.Item>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default FormEdit;\r\n","import React from \"react\";\r\nimport { Image, Card, Row, Col } from \"antd\";\r\n\r\nimport FormEdit from \"./FormEdit\";\r\nconst { Meta } = Card;\r\nconst UserDetail = ({ data }) => {\r\n  return (\r\n    <Row align=\"middle\" style={{ backgroundColor: \"white\" }}>\r\n      <Col xs={24} md={7}>\r\n        <Card\r\n          cover={<Image src={data.avatar} />}\r\n          loading={!data.id}\r\n        >\r\n          <Meta\r\n            title={`${data.id} - ${data.first_name} ${data.last_name}`}\r\n            description={data.email}\r\n            style={{ textAlign: \"center\" }}\r\n          />\r\n        </Card>\r\n      </Col>\r\n      <Col xs={24} md={17}>\r\n        <FormEdit data={data} />\r\n      </Col>\r\n    </Row>\r\n  );\r\n};\r\n\r\nUserDetail.defaultProps = {\r\n  data: {},\r\n};\r\n\r\nexport default UserDetail;\r\n","import React, { useEffect, useState, useReducer } from \"react\";\r\nimport { Table, Avatar } from \"antd\";\r\n\r\nimport { getUsers } from \"../api/users\";\r\nimport { UserContext } from \"../context\";\r\nimport { userReducer } from \"../reducer\";\r\nimport UserDetail from \"../components/UserDetail\";\r\n\r\nconst columns = [\r\n  {\r\n    title: \"\",\r\n    dataIndex: \"avatar\",\r\n    key: \"avatar\",\r\n    render: (img) => <Avatar src={img} />,\r\n  },\r\n  {\r\n    title: \"Id\",\r\n    dataIndex: \"id\",\r\n    key: \"id\",\r\n  },\r\n  {\r\n    title: \"First name\",\r\n    dataIndex: \"first_name\",\r\n    key: \"first_name\",\r\n  },\r\n  {\r\n    title: \"Last name\",\r\n    dataIndex: \"last_name\",\r\n    key: \"last_name\",\r\n  },\r\n  {\r\n    title: \"E-mail\",\r\n    dataIndex: \"email\",\r\n    key: \"email\",\r\n  },\r\n];\r\n\r\nconst Users = () => {\r\n  const [state, dispatch] = useReducer(userReducer, { users: [] });\r\n  const [pagination, setPagination] = useState({});\r\n  const [selectedRowKeys, setSelectedRowKeys] = useState([]);\r\n  const [selectedRow, setSelectedRow] = useState({});\r\n  const [loading, setIsLoading] = useState(false);\r\n\r\n  const rowSelection = {\r\n    onChange: (rowsKeys, selectedRows) => {\r\n      setSelectedRowKeys(rowsKeys);\r\n      setSelectedRow(selectedRows[0]);\r\n    },\r\n    selectedRowKeys,\r\n  };\r\n\r\n  const fetchData = async (current) => {\r\n    setIsLoading(true);\r\n    const { data, page, per_page, total } = await getUsers(current);\r\n    dispatch({ type: \"get_users\", payload: data });\r\n    setPagination({ current: page, pageSize: per_page, total });\r\n    setSelectedRowKeys([data[0].id]);\r\n    setSelectedRow(data[0]);\r\n    setIsLoading(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchData(1);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const userUpdated = state.users.filter(\r\n      (el) => el.id === selectedRowKeys[0]\r\n    );\r\n    setSelectedRow(userUpdated[0]);\r\n  }, [state, selectedRowKeys]);\r\n\r\n  const handleChange = (ev) => {\r\n    fetchData(ev.current);\r\n  };\r\n\r\n  return (\r\n    <UserContext.Provider value={{ users: state.users, updateUsers: dispatch }}>\r\n      <Table\r\n        columns={columns}\r\n        dataSource={state.users}\r\n        pagination={pagination}\r\n        onChange={handleChange}\r\n        loading={loading}\r\n        rowKey=\"id\"\r\n        rowSelection={{\r\n          type: \"radio\",\r\n          ...rowSelection,\r\n        }}\r\n      />\r\n      <UserDetail data={selectedRow} />\r\n    </UserContext.Provider>\r\n  );\r\n};\r\n\r\nexport default Users;\r\n","import React from \"react\";\nimport Layout from \"./components/Layout\";\nimport Users from \"./pages/Users\";\nfunction App() {\n  return (\n    <>\n      <Layout>\n        <Users />\n      </Layout>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"antd/dist/antd.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}